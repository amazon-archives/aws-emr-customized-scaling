# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-emr-customized-scaling # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  region: ${file(./config.${self:provider.stage}.json):region}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  exclude:
    - .gitignore
    - .idea/**
    - .git/**
    - test/**
    - assets/**
    - node_modules/**
    - package.json
    - package-lock.json
    - README_*.md
    - .DS_Store
  individually: true

functions:
  scale-out:
    handler: emr.scaleOut
    timeout: ${file(./config.${self:provider.stage}.json):emr_timeout}
    role: emrLambdaRole
    reservedConcurrency: 1
    events:
      - schedule:
          name: emr-scale-out-trigger
          description: Trigger EMR Scale out in 3:00AM +08:00
          rate: cron(0 19 * * ? *)
          enabled: true
  scale-in:
    handler: emr.scaleIn
    timeout: 10
    role: emrLambdaRole
    reservedConcurrency: 1

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    emrScaleOutFailedTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: EMR
        TopicName: emr-scale-out-failed
    emrLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: emr-lambda-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: cloudwatch-logs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:${env:AWS_PARTITION, 'aws'}:logs:*:*:*
          - PolicyName: emr
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - elasticmapreduce:ModifyInstanceGroups
                    - elasticmapreduce:ListInstanceGroups
                  Resource: arn:${env:AWS_PARTITION, 'aws'}:elasticmapreduce:*:*:cluster/${file(./config.${self:provider.stage}.json):emr_cluster_id}
          - PolicyName: sns
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource:
                    - !Ref emrScaleOutFailedTopic
